openapi: 3.0.0
info:
  version: 1.0.0
  title: E-commerce API
  contact: 
    name: Maninder singh
    email: singhm50@uni.coventry.ac.uk
  licence:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://clonepupil-ralphdilemma-3000.codio-box.uk/api/v1'
    description: Development server 

tags:
  - name: Users
    description: API endpoints for user managment.
  - name: Products 
    description: Access and perform CRUD operations on products entries.
  - name: categories
    description: Access and perform CRUD operations on Category entries.
  - name: orders
    description: Access and perform CRUD operations on orders entries.
  - name: ordersdetails
    description: Access and perform CRUD operations on ordersdetails entries.

  
paths:
  /users/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the user
    get:
      tags:
        - Users
      description:
        Get user by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: View of a user's record, excluding password.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/GetByIdResponse
        '403':
          description: Non-admin users can only view their own record.
        '404':
          description: User was not found in the DB.

    put:
      tags:
        - Users
      description:
        Update user by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Update confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/GetByIdResponse
        '404':
          description: User was not found in the DB.

    
    delete:
      tags:
        - Users
      description:
        Delete user by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Delete confirmation.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/deleteResponse
        '401':
          description: Only admin users can delete user accounts.
        '404':
          description: User was not found in the DB.


  /users:
      summary: Represents an individual user
      description: >
        This resource represents an individual user in the system.
        Each user is identified by a numeric `id`.
      post:
        tags:
          - Users
        description:
          Create a new user account.
        requestBody:
          description: All new user data.
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/user
        responses:
          '201':
            description: User created
            content:
              application/json:
                schema:
                  $ref: ./user.json#/definitions/userCreated
          '400':
            description: user not created.
      
      get:
        tags:
          - Users
        description:
          get all user account.
        responses:
          '200':
            description: show all the users
            content:
              application/json:
                schema:
                  $ref: ./user.json#/definitions/GetAllUsers
          '404':
            description: unauthorised








  /Products/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the product
    get:
      tags:
        - Products 
      description:
        Get Product by ID.
      responses:
        '200':
          description: View of a Product's record.
          content:
            application/json:
              schema:
                $ref: ./products.json#/definitions/GetByIdResponse
        
        '404':
          description: Product was not found in the DB.

    put:
      tags:
        - Products 
      description:
        Update product by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Update confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./products.json#/definitions/GetByIdResponse
        '404':
          description: User was not found in the DB.

    
    delete:
      tags:
        - Products 
      description:
        Delete Product by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Delete confirmation.
          content:
            application/json:
              schema:
                $ref: ./products.json#/definitions/deleteResponse
        '401':
          description: Only admin users can delete Product.
        '404':
          description: Product was not found in the DB.


  /Products:
      summary: Represents an individual Product
      description: >
        This resource represents an product in the system.
        Each user is identified by a numeric `id`.
      post:
        tags:
          - Products 
        description:
          Create a new Product.
        requestBody:
          description: new Products data.
          required: true
          content:
            application/json:
              schema:
                $ref: ./products.json#/definitions/product
        responses:
          '201':
            description: Product created
            content:
              application/json:
                schema:
                  $ref: ./products.json#/definitions/ProductCreated
          '400':
            description: product not created.
      
      get:
        tags:
          - Products 
        description:
          get all Products.
        responses:
          '200':
            description: show all the Product
            content:
              application/json:
                schema:
                  $ref: ./products.json#/definitions/GetAllProduct
          '404':
            description: unauthorised












  /categories/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the category
    get:
      tags:
        - categories 
      description:
        Get category by ID.
      responses:
        '200':
          description: View of a category's record.
          content:
            application/json:
              schema:
                $ref: ./category.json#/definitions/GetByIdResponse
        
        '404':
          description: category was not found in the DB.

    put:
      tags:
        - categories 
      description:
        Update category by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Update confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./category.json#/definitions/GetByIdResponse
        '404':
          description: category was not found in the DB.

    
    delete:
      tags:
        - categories
      description:
        Delete category by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Delete confirmation.
          content:
            application/json:
              schema:
                $ref: ./category.json#/definitions/deleteResponse
        '401':
          description: Only admin users can delete category.
        '404':
          description: category was not found in the DB.


  /categories:
      summary: Represents an individual category
      description: >
        This resource represents an category in the system.
        Each user is identified by a numeric `id`.
      post:
        tags:
          - categories
        description:
          Create a new category
        requestBody:
          description: new category data.
          required: true
          content:
            application/json:
              schema:
                $ref: ./category.json#/definitions/category
        responses:
          '201':
            description: category created
            content:
              application/json:
                schema:
                  $ref: ./category.json#/definitions/categoryCreated
          '400':
            description: category not created.
      
      get:
        tags:
          - categories 
        description:
          get all categories
        responses:
          '200':
            description: show all the categories
            content:
              application/json:
                schema:
                  $ref: ./category.json#/definitions/GetAllcategory
          '404':
            description: unauthorised










  /orders/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the order
    get:
      tags:
        - orders
      description:
        Get orders by ID.
      responses:
        '200':
          description: View of a orders's record.
          content:
            application/json:
              schema:
                $ref: ./orders.json#/definitions/GetByIdResponse
        
        '404':
          description: orders was not found in the DB.

    put:
      tags:
        - orders 
      description:
        Update orders by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Update confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./orders.json#/definitions/GetByIdResponse
        '404':
          description: order was not found in the DB.

    
    delete:
      tags:
        - orders 
      description:
        Delete order by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Delete confirmation.
          content:
            application/json:
              schema:
                $ref: ./orders.json#/definitions/deleteResponse
        '401':
          description: Only admin users can delete orders.
        '404':
          description: order was not found in the DB.


  /orders:
      summary: Represents an individual orders
      description: >
        This resource represents an orders in the system.
        Each user is identified by a numeric `id`.
      post:
        tags:
          - orders 
        description:
          Create a new order.
        requestBody:
          description: new order data.
          required: true
          content:
            application/json:
              schema:
                $ref: ./orders.json#/definitions/orders
        responses:
          '201':
            description: orders created
            content:
              application/json:
                schema:
                  $ref: ./orders.json#/definitions/ordersCreated
          '400':
            description: order not created.
      
      get:
        tags:
          - orders 
        description:
          get all orders.
        responses:
          '200':
            description: show all the order
            content:
              application/json:
                schema:
                  $ref: ./orders.json#/definitions/GetAllorders
          '404':
            description: unauthorised











  /ordersdetails/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the ordersdetail
    get:
      tags:
        - ordersdetails 
      description:
        Get ordersdetails by ID.
      responses:
        '200':
          description: View of a ordersdetails's record.
          content:
            application/json:
              schema:
                $ref: ./ordersdetails.json#/definitions/GetByIdResponse
        
        '404':
          description: ordersdetail was not found in the DB.

    put:
      tags:
        - ordersdetails 
      description:
        Update ordersdetail by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Update confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./ordersdetails.json#/definitions/GetByIdResponse
        '404':
          description: User was not found in the DB.

    
    delete:
      tags:
        - ordersdetails
      description:
        Delete ordersdetail by ID.
      requestBody:
          description: user login details
          required: true
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
      responses:
        '200':
          description: Delete confirmation.
          content:
            application/json:
              schema:
                $ref: ./ordersdetails.json#/definitions/deleteResponse
        '401':
          description: Only admin users can delete ordersdetail.
        '404':
          description: ordersdetail was not found in the DB.


  /ordersdetails:
      summary: Represents an individual ordersdetail
      description: >
        This resource represents an ordersdetails in the system.
        Each user is identified by a numeric `id`.
      post:
        tags:
          - ordersdetails 
        description:
          Create a new ordersdetail.
        requestBody:
          description: new ordersdetails data.
          required: true
          content:
            application/json:
              schema:
                $ref: ./ordersdetails.json#/definitions/orderdetails
        responses:
          '201':
            description: ordersdetail created
            content:
              application/json:
                schema:
                  $ref: ./ordersdetails.json#/definitions/orderdetailsCreated
          '400':
            description: ordersdetail not created.
      
      get:
        tags:
          - ordersdetails 
        description:
          get all ordersdetailss.
        responses:
          '200':
            description: show all the ordersdetails
            content:
              application/json:
                schema:
                  $ref: ./ordersdetails.json#/definitions/GetAllorderdetails
          '404':
            description: unauthorised



